



stack, slice, queue, tick, method--方法, abstract--抽象类
elmes.getBoundingClientRect();
JSON.parse()和JSON.stringify()

then()和Promise
var promise = new Promise(function(resolve,reject){});

input:required//必须
	:valid//有效
	:invalid//无效

-webkit-appearance: button;//使 div 元素看上去像一个按钮

navigator.getUserMedia ( constraints, successCallback, errorCallback );
constraints该对象有两个成员，都是布尔值类型，表示是否调用摄像头和麦克风。{ audio: true, video: true }
{ audio: true, video: { width: 1280, height: 720 } }
{
  audio: true,
  video: {//ideal应用最理想的
    width: { min: 1024, ideal: 1280, max: 1920 },
    height: { min: 776, ideal: 720, max: 1080 }
  }
}
{ audio: true, video: { facingMode: "user" } }优先使用前置摄像头（如果有的话）
{ audio: true, video: { facingMode: { exact: "environment" } } }强制使用后置摄像头
https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia

1、/g 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加/g最多只会匹配一个；
2、/i 表示匹配的时候不区分大小写，这个跟其它语言的正则用法相同；
3、/m 表示多行匹配。什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的^$符号；
4、/s 与/m相对，单行模式匹配；
5、/e 可执行模式，此为PHP专有参数，例如preg_replace函数；
6、/x 忽略空白模式。

**注意：这些修饰符是可以混合使用的。例如 /ig、/ie等。**
http://blog.csdn.net/fieldtianye/article/details/46926417

/*
 Flex 布局教程：语法篇
 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
 Flex 布局教程：实例篇
 http://www.ruanyifeng.com/blog/2015/07/flex-examples.html
 
flex-flow 属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
	flex-flow: <flex-direction> || <flex-wrap>;
	
flex-direction 属性决定主轴的方向（即项目的排列方向）。
	flex-direction: row | row-reverse | column | column-reverse;
	row（默认值）：主轴为水平方向，起点在左端。
	row-reverse：主轴为水平方向，起点在右端。
	column：主轴为垂直方向，起点在上沿。
	column-reverse：主轴为垂直方向，起点在下沿。
	
flex-wrap 属性定义，如果一条轴线排不下，如何换行。
	flex-wrap: nowrap | wrap | wrap-reverse;
	nowrap（默认）：不换行。
	wrap：换行，第一行在上方。
	wrap-reverse：换行，第一行在下方。

justify-content 属性定义了项目在主轴上的对齐方式。
	justify-content: flex-start | flex-end | center | space-between | space-around;
	flex-start（默认值）：左对齐
	flex-end：右对齐
	center： 居中
	space-between：两端对齐，项目之间的间隔都相等。
	space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
	
align-items 属性定义项目在交叉轴上如何对齐。
	flex-start：交叉轴的起点对齐。
	flex-end：交叉轴的终点对齐。
	center：交叉轴的中点对齐。
	baseline: 项目的第一行文字的基线对齐。
	stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
	
align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
	align-content: flex-start | flex-end | center | space-between | space-around | stretch;
	flex-start：与交叉轴的起点对齐。
	flex-end：与交叉轴的终点对齐。
	center：与交叉轴的中点对齐。
	space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
	space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
	stretch（默认值）：轴线占满整个交叉轴。

以下6个属性设置在项目上。
order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。
	order: <integer>;

flex 属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
	 flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
	 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
	建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。
	
flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
	flex-grow: <number>; // default 0
	如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。
	如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
	
flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
	flex-shrink: <number>; // default 1
	如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。
	如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
	负值对该属性无效。
	
flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。
浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
	flex-basis: <length> | auto;  //default auto 
	它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。


align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。
默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
	 align-self: auto | flex-start | flex-end | center | baseline | stretch;
	 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。
*/


/**************CSS变量var()语法和用法和特性***************/
	:root{
		--变量: red;
		全局,CSS变量有命名空间；
	}
	.b{
		--变量: #00F;
		只有class为b的才可以用；
	}
	p{
		color: var(--变量);
		/*var( <自定义属性名> [, <默认值 ]? )*/
	}
/******************CSS变量end*********************/
JS正则相关知识点，正则中问号？冒号：的用法 (2013-11-09 22:43:25)转载▼
标签： js 正则 	分类： 学习笔记
一、正则基本语法

1. 正则匹配默认为贪婪模式，即尽可能多地匹配：
   'abdba'.match(/.*b/)结果为abdb   
   在通配符后加 '?' 表示非贪婪匹配，即尽可能少地匹配
   'abdba'.match(/.*?b/)结果为ab
   注意多个元字符同时存在匹配时，前面的匹配尽可能多：
   'abdba'.match(/(\w+)(\w+)/)结果为["abdba","abdb","a"]
2. 正则中|分隔符最优先进行分隔
   /^a(bc)|(cd)e$/ 等价于 /(^abc)|(cde$)/
   注意没有进行匹配的子表达式内的分组结果为undefined：
   'abc'.match(/abc(.*)|a(\w+)/)结果为["abc","",undefined]
   其中第一个子表达式abc(.*)匹配成功，分组无匹配，结果是""
   第二个子表达式a(\w+)未进行匹配，分组结果是undefined
3. ^和$代表行首和行尾字符，因此有这样的正则：
   location.search.match(/para=(\d+)(&|$)/)
4. ?:组合使用，代表该分组为非捕获分组，即在匹配结果中不编号输出:
   '?para=20'.match(/para=(\d+)(&|$)/)结果为["para=20","20",""]
   而非捕获分组结果如下：
   '?para=20'.match(/para=(?:\d+)(&|$)/)结果为["para=20",""]
5. \n可以将已匹配得到的第n个分组结果作为匹配项：
   /(\d)\w+\1/.test('1abc1')结果为true
   /(\d)\w+\1/.test('1abc2')结果为false
6. 预匹配，有肯定(?=x)和否定(?!x)两种形式，表示匹配结果后紧跟着x或不能有x（注意匹配结果中不含x）：
   'abc'.match(/\w/g)结果为["a","b","c"]
   'abc'.match(/\w(?=b)/g)结果为["a"]
   'abc'.match(/\w(?!b)/g)结果为["b","c"]
   预匹配分为向前查看和向后查看，JS目前只支持向前查看（即匹配项还没匹配到的部分，对应字符串更后的位置），向后查看的正则形式为(?<=x)和(?
二、正则相关函数
1. String.replace,该函数结合正则主要有以下三种用法(注意该函数返回新字符串而不会修改字符串本身)：
   a.基本替换，注意不加g的话找到一个匹配替换就会停止
   '?para=20&value=9'.replace(/\d+/g,'0') 结果为 "?para=0&value=0"
   b.获取分组，在替换字符串中$n代表第n个捕获分组，从0开始计数
   '?para=20&value=9'.replace(/para=(\d+)&value=(\d+)/,'para:$2|value:$1') 结果为 "?para:9|value:20"
   c.第二个参数为函数时，该函数参数依次为各个捕获分组(string)，之后是匹配项在字符串中出现的位置(number)和原字符串的副本
   '?para=20&value=9'.replace(/para=(\d+)&value=(\d+)/,function(p0,p1,p2,p3,p4){
      return 'res=' + (Number(p1)-Number(p2));
   }) 结果为 "?res=11"
/****************** MutationObserver(变动观察器) *********************/
/*
MutationObserver（变动观察器）是监视DOM变动的接口

childList：子元素的变动
attributes：属性的变动
characterData：节点内容或节点文本的变动
subtree：所有下属节点（包括子节点和子节点的子节点）的变动
想要观察哪一种变动类型，就在option对象中指定它的值为true。需要注意的是，不能单独观察subtree变动，必须同时指定childList、attributes和characterData中的一种或多种。
除了变动类型，option对象还可以设定以下属性：
attributeOldValue：值为true或者为false。如果为true，则表示需要记录变动前的属性值。
characterDataOldValue：值为true或者为false。如果为true，则表示需要记录变动前的数据值。
attributesFilter：值为一个数组，表示需要观察的特定属性（比如['class', 'str']）。

disconnect方法用来停止观察。发生相应变动时，不再调用回调函数。
takeRecord方法用来清除变动记录，即不再处理未处理的变动。

MutationRecord对象

DOM对象每次发生变化，就会生成一条变动记录。这个变动记录对应一个MutationRecord对象，该对象包含了与变动相关的所有信息。Mutation Observer进行处理的一个个变动对象所组成的数组。

MutationRecord对象包含了DOM的相关信息，有如下属性：

type:观察的变动类型（attribute、characterData或者childList）。
target:发生变动的DOM对象。
addedNodes:新增的DOM对象。
removeNodes:删除的DOM对象。
previousSibling:前一个同级的DOM对象，如果没有则返回null。
nextSibling:下一个同级的DOM对象，如果没有就返回null。
attributeName:发生变动的属性。如果设置了attributeFilter，则只返回预先指定的属性。
oldValue:变动前的值。这个属性只对attribute和characterData变动有效，如果发生childList变动，则返回null。
*/

var listen = new MutationObserver(resize);
var options = {
	attributes: true,
	attributeFilter: ['style']
};
listen.observe(target, options);
function resize(mutations,observe){}
/**
 * MutationObserver对象有三个方法，分别如下：

observe：设置观察目标，接受两个参数，target：观察目标，options：通过对象成员来设置观察选项
disconnect：阻止观察者观察任何改变
takeRecords：清空记录队列并返回里面的内容
关于observe方法中options参数有已下几个选项：

childList：设置true，表示观察目标子节点的变化，比如添加或者删除目标子节点，不包括修改子节点以及子节点后代的变化
attributes：设置true，表示观察目标属性的改变
characterData：设置true，表示观察目标数据的改变
subtree：设置为true，目标以及目标的后代改变都会观察
attributeOldValue：如果属性为true或者省略，则相当于设置为true，表示需要记录改变前的目标属性值，设置了attributeOldValue可以省略attributes设置
characterDataOldValue：如果characterData为true或省略，则相当于设置为true,表示需要记录改变之前的目标数据，设置了characterDataOldValue可以省略characterData设置
attributeFilter：如果不是所有的属性改变都需要被观察，并且attributes设置为true或者被忽略，那么设置一个需要观察的属性本地名称（不需要命名空间）的列表

 */
/****************** 变动观察器end *********************/


/******************复制黏贴*********************/
	var inputText = document.getElementById('inputText');
    var currentFocus = document.activeElement;
    inputText.focus();
    inputText.setSelectionRange(0, inputText.value.length);
    var bl = document.execCommand('copy', false,{text:'ABC'});
    currentFocus.focus();


document.execCommand("2D-Position","false","true");
下面列出的是指令参数及意义

2D-Position 允许通过拖曳移动绝对定位的对象。
AbsolutePosition 设定元素的 position 属性为“absolute”(绝对)。
BackColor 设置或获取当前选中区的背景颜色。
BlockDirLTR 目前尚未支持。
BlockDirRTL 目前尚未支持。
Bold 切换当前选中区的粗体显示与否。
BrowseMode 目前尚未支持。
Copy 将当前选中区复制到剪贴板。
CreateBookmark 创建一个书签锚或获取当前选中区或插入点的书签锚的名称。
CreateLink 在当前选中区上插入超级链接，或显示一个对话框允许用户指定要为当前选中区插入的超级链接的 URL。
Cut 将当前选中区复制到剪贴板并删除之。
Delete 删除当前选中区。
DirLTR 目前尚未支持。
DirRTL 目前尚未支持。
EditMode 目前尚未支持。
FontName 设置或获取当前选中区的字体。
FontSize 设置或获取当前选中区的字体大小。
ForeColor 设置或获取当前选中区的前景(文本)颜色。
FormatBlock 设置当前块格式化标签。
Indent 增加选中文本的缩进。
InlineDirLTR 目前尚未支持。
InlineDirRTL 目前尚未支持。
InsertButton 用按钮控件覆盖当前选中区。
InsertFieldset 用方框覆盖当前选中区。
InsertHorizontalRule 用水平线覆盖当前选中区。
InsertIFrame 用内嵌框架覆盖当前选中区。
InsertImage 用图像覆盖当前选中区。
InsertInputButton 用按钮控件覆盖当前选中区。
InsertInputCheckbox 用复选框控件覆盖当前选中区。
InsertInputFileUpload 用文件上载控件覆盖当前选中区。
InsertInputHidden 插入隐藏控件覆盖当前选中区。
InsertInputImage 用图像控件覆盖当前选中区。
InsertInputPassword 用密码控件覆盖当前选中区。
InsertInputRadio 用单选钮控件覆盖当前选中区。
InsertInputReset 用重置控件覆盖当前选中区。
InsertInputSubmit 用提交控件覆盖当前选中区。
InsertInputText 用文本控件覆盖当前选中区。
InsertMarquee 用空字幕覆盖当前选中区。
InsertOrderedList 切换当前选中区是编号列表还是常规格式化块。
InsertParagraph 用换行覆盖当前选中区。
InsertSelectDropdown 用下拉框控件覆盖当前选中区。
InsertSelectListbox 用列表框控件覆盖当前选中区。
InsertTextArea 用多行文本输入控件覆盖当前选中区。
InsertUnorderedList 切换当前选中区是项目符号列表还是常规格式化块。
Italic 切换当前选中区斜体显示与否。
JustifyCenter 将当前选中区在所在格式化块置中。
JustifyFull 目前尚未支持。
JustifyLeft 将当前选中区所在格式化块左对齐。
JustifyNone 目前尚未支持。
JustifyRight 将当前选中区所在格式化块右对齐。
LiveResize 迫使 MSHTML 编辑器在缩放或移动过程中持续更新元素外观，而不是只在移动或缩放完成后更新。
MultipleSelection 允许当用户按住 Shift 或 Ctrl 键时一次选中多于一个站点可选元素。
Open 目前尚未支持。
Outdent 减少选中区所在格式化块的缩进。
OverWrite 切换文本状态的插入和覆盖。
Paste 用剪贴板内容覆盖当前选中区。
PlayImage 目前尚未支持。
Print 打开打印对话框以便用户可以打印当前页。
Redo 目前尚未支持。
Refresh 刷新当前文档。
RemoveFormat 从当前选中区中删除格式化标签。
RemoveParaFormat 目前尚未支持。
SaveAs 将当前 Web 页面保存为文件。
SelectAll 选中整个文档。
SizeToControl 目前尚未支持。
SizeToControlHeight 目前尚未支持。
SizeToControlWidth 目前尚未支持。
Stop 目前尚未支持。
StopImage 目前尚未支持。
StrikeThrough 目前尚未支持。
Subscript 目前尚未支持。
Superscript 目前尚未支持。
UnBookmark 从当前选中区中删除全部书签。
Underline 切换当前选中区的下划线显示与否。
Undo 目前尚未支持。
Unlink 从当前选中区中删除全部超级链接。
Unselect 清除当前选中区的选中状态。


/******************复制黏贴end*********************/


IE8兼容
{
	IE8不能识别
	rgba(0,0,0,.2);
	calc(0px + 0px);
	background: url(test.svg), none;
	IE9不能识别
	animation: ;
	transition: ;
	linear-gradient(to top, transparent, transparent);
}





/*********************************/

'transform:none | <transform-function>'
transform-function list:

matrix() = matrix(<number>[,<number>]{5,5})
 以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵 
 
matrix3d() = matrix3d(<number>[,<number>]{15,15})
 以一个4x4矩阵的形式指定一个3D变换 
 
translate() = translate(<translation-value>[,<translation-value>]?)

translate3d() = translate3d(<translation-value>,<translation-value>,<length>)

translatex() = translatex(<translation-value>)

translatey() = translatey(<translation-value>)

translatez() = translatez(<length>)

rotate() = rotate(<angle>)

rotate3d() = rotate3d(<number>,<number>,<number>,<angle>)

rotatex() = rotatex(<angle>)

rotatey() = rotatey(<angle>)

rotatez() = rotatez(<angle>)

scale() = scale(<number>[,<number>]?)

scale3d() = scale3d(<number>,<number>,<number>)

scalex() = scalex(<number>)

scaley() = scaley(<number>)

scalez() = scalez(<number>)

skew() = skew(<angle>[,<angle>]?)

skewx() = skewx(<angle>)

skewy() = skewy(<angle>)

perspective() = perspective(<length>)

<translation-value> = <length> | <percentage>



'transition： property, duration, timing-function, delay'
<' transition-property '>： 检索或设置对象中的参与过渡的属性 
<' transition-duration '>： 检索或设置对象过渡的持续时间 
<' transition-timing-function '>： 检索或设置对象中过渡的动画类型 
<' transition-delay '>： 检索或设置对象延迟过渡的时间 

'transition-timing-function'
linear： 线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0) 
ease： 平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0) 
ease-in： 由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0) 
ease-out： 由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0) 
ease-in-out： 由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0) 
step-start： 等同于 steps(1, start) 
step-end： 等同于 steps(1, end) 
steps(<integer>[, [ start | end ] ]?)： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的步数。第二个参数取值可以是start或end，指定每一步的值发生变化的时间点。第二个参数是可选的，默认值为end。 
cubic-bezier(<number>, <number>, <number>, <number>)： 特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内 




css3-mix-blend-mode:多个元素；
-background-blend-mode:多个背景

mix-blend-mode: normal;          //正常
mix-blend-mode: multiply;        //正片叠底
mix-blend-mode: screen;          //滤色
mix-blend-mode: overlay;         //叠加
mix-blend-mode: darken;          //变暗
mix-blend-mode: lighten;         //变亮
mix-blend-mode: color-dodge;     //颜色减淡
mix-blend-mode: color-burn;      //颜色加深
mix-blend-mode: hard-light;      //强光
mix-blend-mode: soft-light;      //柔光
mix-blend-mode: difference;      //差值
mix-blend-mode: exclusion;       //排除
mix-blend-mode: hue;             //色相
mix-blend-mode: saturation;      //饱和度
mix-blend-mode: color;           //颜色
mix-blend-mode: luminosity;      //亮度

mix-blend-mode: initial;         //初始
mix-blend-mode: inherit;         //继承
mix-blend-mode: unset;           //复原




window.location
属性 描述 
hash 设置或获取 href 属性中在井号“#”后面的分段。 
host 设置或获取 location 或 URL 的 hostname 和 port 号码。 
hostname 设置或获取 location 或 URL 的主机名称部分。 
href 设置或获取整个 URL 为字符串。 
pathname 设置或获取对象指定的文件名或路径。 
port 设置或获取与 URL 关联的端口号码。 
protocol 设置或获取 URL 的协议部分。 
search 设置或获取 href 属性中跟在问号后面的部分。 

如window.location.href 设置或获取整个 URL 为字符串。


::-webkit-scrollbar        滚动条整体部分，其中的属性有width,height,background,border（就和一个块级元素一样）等。
::-webkit-scrollbar-button      滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。
::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。
::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。
::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分
::-webkit-scrollbar-corner               边角
::-webkit-resizer                       定义右下角拖动块的样式



/*
 * http://zha-zi.iteye.com/blog/2046632
 * http://zhidao.baidu.com/link?url=ny5Wzf1hV6LYe5xjcTt7a7CT_aw807k-W3iCIslHsfHeO1v_pusyR2P4CrdpBgPqZLlw1e4O_NbIlahaVR1fRId1Ujt8J-QFWwyIsmG2Jue
 */


//  box-shadow: -10px 0 10px red, /*左边阴影*/
//  box-shadow: 10px 0 10px yellow, /*右边阴影*/
//  box-shadow: 0 -10px 10px blue, /*顶部阴影*/
//  box-shadow: 0 10px 10px green; /*底边阴影*/



/*
http://www.tuicool.com/articles/juiaEn
js如何控制css伪元素内容（before，after）
在css中，伪元素的 content 是能读取到data属性的。
也就是说我们可以这样写css
p:after {
  content: attr(data-content);
}
在进化版是第二版的变种，
css文件
p.change:after {
  content: attr(data-content);
}
js文件
$(this).addClass('change').attr('data-content', content);

var dom = document.querySelector(".total"),
window.getComputedStyle(dom , "::after").content;   // 结果是："counter(icecream)"
*/



/*
CSS3 Columns:比table更好用的分列式布局方法
http://www.webhek.com/css3-columns
column-count: 列数目
column-gap: 各列之间间隙宽度
column-width: 建议宽度；未必会使用，浏览器基于此数值进行计算
column-rule-width：列之间分割线宽度
column-rule-style：列之间分割线风格
column-rule-color：列之间分割线颜色
column-span: 允许一个元素的宽度跨越多列
column-fill: 分列方式
*/



/*
* http://www.jb51.net/article/14397.htm
* http://www.bkjia.com/webzh/878262.html
 如何实现刷新当前页面呢？借助js你将无所不能。
1，reload 方法，该方法强迫浏览器刷新当前页面。
语法：location.reload([bForceGet])
参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面, 相当于客户端点击 F5("刷新")
2，replace 方法，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，因此当使用replace方法之后，你不能通过“前进”和“后退”来访问已经被替换的URL。
语法： location.replace(URL)
通常使用： location.reload() 或者是 history.go(0) 来做。
此方法类似客户端点F5刷新页面，所以页面method="post"时，会出现"网页过期"的提示。
因为Session的安全保护机制。
当调用 location.reload() 方法时， aspx页面此时在服务端内存里已经存在， 因此必定是 IsPostback 的。
如果有这种应用： 需要重新加载该页面，也就是说期望页面能够在服务端重新被创建，期望是 Not IsPostback 的。
这里，location.replace() 就可以完成此任务。被replace的页面每次都在服务端重新生成。
代码： location.replace(location.href);

返回并刷新页面：
location.replace(document.referrer);
document.referrer //前一个页面的URL
不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。

Javascript刷新页面的几种方法：
1，history.go(0)
2，location.reload()
3，location=location
4，location.assign(location)
5，document.execCommand('Refresh')
6，window.navigate(location)
7，location.replace(location)
8，document.URL=location.href

1，自动刷新页面的方法:
<meta http-equiv="refresh" content="20">
2，页面自动跳转：把如下代码加入<head>区域中
<meta http-equiv="refresh" content="20;url=http://www.jb51.net">
 */

/*CSS3 渐变（Gradients）*/
/*
http://www.runoob.com/css3/css3-gradients.html
从上到下的线性渐变：
#grad {
  background: -webkit-linear-gradient(red, blue);
  background: -o-linear-gradient(red, blue);
  background: -moz-linear-gradient(red, blue);
  background: linear-gradient(red, blue);
}
从左到右的线性渐变：
 .grad {
    height: 200px;
    background: -webkit-linear-gradient(left, red , blue);
    background: -o-linear-gradient(right, red, blue);
    background: -moz-linear-gradient(right, red, blue);
    background: linear-gradient(to right, red , blue);
}
从左上角到右下角的线性渐变：
#grad {
  background: -webkit-linear-gradient(left top, red , blue);
  background: -o-linear-gradient(bottom right, red, blue);
  background: -moz-linear-gradient(bottom right, red, blue);
  background: linear-gradient(to bottom right, red , blue);
}
带有指定的角度的线性渐变：
#grad {
  background: -webkit-linear-gradient(180deg, red, blue);
  background: -o-linear-gradient(180deg, red, blue);
  background: -moz-linear-gradient(180deg, red, blue);
  background: linear-gradient(180deg, red, blue);
}
带有多个颜色结点的从上到下的线性渐变：
#grad {
  background: -webkit-linear-gradient(red, green, blue);
  background: -o-linear-gradient(red, green, blue);
  background: -moz-linear-gradient(red, green, blue);
  background: linear-gradient(red, green, blue);
}
下面的实例演示了如何创建一个带有彩虹颜色和文本的线性渐变：
#grad {
  background: -webkit-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet);
  background: -o-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet);
  background: -moz-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet);
  background: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
}
从左到右的线性渐变，带有透明度：
#grad {
  background: -webkit-linear-gradient(left,rgba(255,0,0,0),rgba(255,0,0,1));
  background: -o-linear-gradient(right,rgba(255,0,0,0),rgba(255,0,0,1));
  background: -moz-linear-gradient(right,rgba(255,0,0,0),rgba(255,0,0,1));
  background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
}
一个重复的线性渐变：
#grad {
  background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);
  background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);
  background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);
  background: repeating-linear-gradient(red, yellow 10%, green 20%);
}
 */
/*CSS3 径向渐变*/
/*
颜色结点均匀分布的径向渐变：
#grad {
  background: -webkit-radial-gradient(red, green, blue);
  background: -o-radial-gradient(red, green, blue);
  background: -moz-radial-gradient(red, green, blue);
  background: radial-gradient(red, green, blue);
}
颜色结点不均匀分布的径向渐变：
#grad {
  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);
  background: -o-radial-gradient(red 5%, green 15%, blue 60%);
  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);
  background: radial-gradient(red 5%, green 15%, blue 60%);
}
形状为圆形的径向渐变：
#grad {
  background: -webkit-radial-gradient(circle, red, yellow, green);
  background: -o-radial-gradient(circle, red, yellow, green);
  background: -moz-radial-gradient(circle, red, yellow, green);
  background: radial-gradient(circle, red, yellow, green);
}
不同尺寸大小关键字的使用
size 参数定义了渐变的大小。它可以是以下四个值：
closest-side
farthest-side
closest-corner
farthest-corner
实例
带有不同尺寸大小关键字的径向渐变：
#grad1 {
  background: -webkit-radial-gradient(60% 55%, closest-side,blue,green,yellow,black);
  background: -o-radial-gradient(60% 55%, closest-side,blue,green,yellow,black);
  background: -moz-radial-gradient(60% 55%, closest-side,blue,green,yellow,black);
  background: radial-gradient(60% 55%, closest-side,blue,green,yellow,black);
}

#grad2 {
  background: -webkit-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);
  background: -o-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);
  background: -moz-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);
  background: radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);
}
重复的径向渐变
repeating-radial-gradient() 函数用于重复径向渐变：
实例
一个重复的径向渐变：
#grad {
  background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);
  background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);
  background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);
  background: repeating-radial-gradient(red, yellow 10%, green 15%);
}
 */

